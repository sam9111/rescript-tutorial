// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var SimpleTest = require("./simpleTest.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

function firstInPair(param) {
  return param[0];
}

function secondInPair(param) {
  return param[1];
}

var languagesAndAuthors = [
  [
    "Java",
    "James Gosling"
  ],
  [
    "C",
    "Dennis Ritchie"
  ],
  [
    "Python",
    "Guido van Rossum"
  ],
  [
    "PHP",
    "Rasmus Lerdorf"
  ],
  [
    "Perl",
    "Larry Wall"
  ],
  [
    "JavaScript",
    "Brendan Eich"
  ],
  [
    "Ruby",
    "Yukihiro Matsumoto"
  ],
  [
    "Lisp",
    "John McCarthy"
  ],
  [
    "Pascal",
    "Niklaus Wirth"
  ]
];

var arrayLength = languagesAndAuthors.length;

var arrayFirstItem = Caml_array.get(languagesAndAuthors, 0);

var arrayLastItem = Caml_array.get(languagesAndAuthors, arrayLength - 1 | 0);

function tupleToString(param) {
  return param[0] + ": " + param[1];
}

languagesAndAuthors.map(tupleToString);

Belt_Array.map(languagesAndAuthors, tupleToString);

function parsePL(param) {
  return {
          language: param[0],
          author: param[1]
        };
}

SimpleTest.assertEqual({
      language: "JavaScript",
      author: "Brendan Eich"
    }, {
      language: "JavaScript",
      author: "Brendan Eich"
    }, "[exercise 1] parse `pl` record type value from string tuple");

var lowercaseLanguages = Belt_Array.map(languagesAndAuthors, (function (param) {
        return param[0].toLocaleLowerCase();
      }));

SimpleTest.assertEqual([
      "java",
      "c",
      "python",
      "php",
      "perl",
      "javascript",
      "ruby",
      "lisp",
      "pascal"
    ], lowercaseLanguages, "[exercise 2] languages in lowercase");

var names = [
  [
    "Jhumpa",
    "Lahiri"
  ],
  [
    "J. K",
    "Rowling"
  ],
  [
    "Devdutt",
    "Pattanaik"
  ]
];

var fullnames = Belt_Array.map(names, (function (param) {
        return param[0] + " " + param[1];
      }));

SimpleTest.assertEqual([
      "Jhumpa Lahiri",
      "J. K Rowling",
      "Devdutt Pattanaik"
    ], fullnames, "[exercise 3] full names");

var authors = Belt_Array.map(languagesAndAuthors, (function (param) {
        return param[1];
      }));

SimpleTest.assertEqual([
      "James Gosling",
      "Dennis Ritchie",
      "Guido van Rossum",
      "Rasmus Lerdorf",
      "Larry Wall",
      "Brendan Eich",
      "Yukihiro Matsumoto",
      "John McCarthy",
      "Niklaus Wirth"
    ], authors, "[exercise 4] programming language authors");

var filtered = languagesAndAuthors.filter(function (param) {
      return param[0].startsWith("P");
    });

var languages = Belt_Array.map(languagesAndAuthors, (function (param) {
        return param[0];
      }));

var compiledLanguages = [
  "Java",
  "C"
];

var dynamicLanguages = languages.filter(function (language) {
      return !compiledLanguages.includes(language);
    });

SimpleTest.assertEqual([
      "Python",
      "PHP",
      "Perl",
      "JavaScript",
      "Ruby",
      "Lisp",
      "Pascal"
    ], dynamicLanguages, "[exercise 5] dynamic languages");

var mh = {
  state: "Maharasthra",
  count: 2342
};

var ka = {
  state: "Karnataka",
  count: 745
};

var dl = {
  state: "Delhi",
  count: 385
};

var wb = {
  state: "West Bengal",
  count: 621
};

var jh = {
  state: "Jharkand",
  count: 111
};

var tn = {
  state: "Tamil Nadu",
  count: 770
};

var totalCount = [
    mh,
    ka,
    dl,
    wb,
    jh,
    tn
  ].reduce((function (acc, param) {
        return acc + param.count | 0;
      }), 0);

var tableRows = [
  [
    "Java",
    "James Gosling"
  ],
  [
    "C",
    "Dennis Ritchie"
  ]
];

var tableRowsHTML = tableRows.reduce((function (html, param) {
        return html + ("\n<tr>\n  <td>" + param[0] + "</td>\n  <td>" + param[1] + "</td>\n</tr>");
      }), "");

var expectedTableHTML = "\n<tr>\n  <td>Java</td>\n  <td>James Gosling</td>\n</tr>\n<tr>\n  <td>C</td>\n  <td>Dennis Ritchie</td>\n</tr>";

SimpleTest.assertEqual(expectedTableHTML, tableRowsHTML, "[exercise 6] Use `Js.Array.reduce` to generate table rows HTML");

var books = [
  "Design as Art",
  "Anathem",
  "Shogun"
];

var authors$1 = [
  "Bruno Munari",
  "Neal Stephenson",
  "James Clavell"
];

var mergedBooks = Belt_Array.map(Belt_Array.zip(books, authors$1), (function (param) {
        return {
                name: param[0],
                author: param[1]
              };
      }));

var expectedBooks = SimpleTest.assertEqual([
      {
        name: "Design as Art",
        author: "Bruno Munari"
      },
      {
        name: "Anathem",
        author: "Neal Stephenson"
      },
      {
        name: "Shogun",
        author: "James Clavell"
      }
    ], mergedBooks, "[exercise 7] merge two array values into an array of record values");

var statewiseMetrics_1 = {
  hd: ka,
  tl: {
    hd: dl,
    tl: {
      hd: wb,
      tl: {
        hd: jh,
        tl: {
          hd: tn,
          tl: /* [] */0
        }
      }
    }
  }
};

var statewiseMetrics = {
  hd: mh,
  tl: statewiseMetrics_1
};

var gj = {
  state: "Gujarat",
  count: 500
};

var statewiseMetrics2 = {
  hd: gj,
  tl: statewiseMetrics
};

var reversed = Belt_List.reverse(statewiseMetrics2);

function myCustomMap(l, f) {
  return Belt_List.reverse(Belt_List.reduce(l, /* [] */0, (function (acc, l_value) {
                    return {
                            hd: Curry._1(f, l_value),
                            tl: acc
                          };
                  })));
}

function myCustomFilter(l, c) {
  return Belt_List.reverse(Belt_List.reduce(l, /* [] */0, (function (acc, l_value) {
                    if (Curry._1(c, l_value)) {
                      return {
                              hd: l_value,
                              tl: acc
                            };
                    } else {
                      return acc;
                    }
                  })));
}

Belt_List.forEach(myCustomMap(myCustomFilter(statewiseMetrics, (function (x) {
                return x.count > 500;
              })), (function (param) {
            return param.state + ": " + String(param.count);
          })), (function (prim) {
        console.log(prim);
        
      }));

function describeList(xs) {
  if (xs) {
    return "The first item in this list is: " + xs.hd + " and there are other " + String(Belt_List.length(xs.tl)) + " items.";
  } else {
    return "This list is empty";
  }
}

console.log("This list is empty");

console.log(describeList({
          hd: "alone",
          tl: /* [] */0
        }));

console.log(describeList({
          hd: "hello",
          tl: {
            hd: "world",
            tl: {
              hd: "good",
              tl: {
                hd: "bye",
                tl: /* [] */0
              }
            }
          }
        }));

function userInputToKey(keypress) {
  switch (keypress) {
    case "down" :
        return /* Down */1;
    case "escape" :
        return /* Escape */4;
    case "left" :
        return /* Left */3;
    case "right" :
        return /* Right */2;
    case "space" :
        return /* Space */5;
    case "up" :
        return /* Up */0;
    default:
      return ;
  }
}

userInputToKey("1234");

userInputToKey("escape");

function printMessage(message) {
  if (message !== undefined) {
    return message;
  } else {
    return "This message is empty";
  }
}

var bukowski = "If you’re going to try, go all the way.\nOtherwise, don’t even start.\nIf you\'re going to try, go all the way.\nThis could mean losing girlfriends, wives, relatives, jobs and maybe even your mind.\nIt could mean not eating for three or four days.\nIt could mean freezing on a park bench.\nIt could mean jail.\nIt could mean derision, mockery, isolation.\nIsolation is the gift.\nAll the others are a test of your endurance, of how much you really want to do it.\nAnd, you’ll do it, despite rejection and the worst odds.\nAnd it will be better than anything else you can imagine.\nIf you’re going to try, go all the way.\nThere is no other feeling like that.\nYou will be alone with the gods, and the nights will flame with fire.\nDO IT. DO IT. DO IT. All the way\nYou will ride life straight to perfect laughter. It’s the only good fight there is";

console.log(bukowski);

console.log("This message is empty");

function repeatTwice(x) {
  if (x !== undefined) {
    return x.repeat(2);
  }
  
}

var messages = [
  "hello",
  "world",
  undefined,
  undefined,
  "goodbye"
];

Belt_Array.map(messages, repeatTwice);

function repeatTwiceZeroKnowledge(text) {
  return text.repeat(2);
}

var some = Belt_Array.map(messages, (function (x) {
        return Belt_Option.map(x, repeatTwiceZeroKnowledge);
      }));

var center = [
  960,
  540
];

var leroy = [
  "Xavier",
  "Leroy"
];

var coords = [
  101.5,
  42.3
];

exports.center = center;
exports.leroy = leroy;
exports.coords = coords;
exports.firstInPair = firstInPair;
exports.secondInPair = secondInPair;
exports.languagesAndAuthors = languagesAndAuthors;
exports.arrayLength = arrayLength;
exports.arrayFirstItem = arrayFirstItem;
exports.arrayLastItem = arrayLastItem;
exports.tupleToString = tupleToString;
exports.parsePL = parsePL;
exports.lowercaseLanguages = lowercaseLanguages;
exports.names = names;
exports.fullnames = fullnames;
exports.filtered = filtered;
exports.languages = languages;
exports.compiledLanguages = compiledLanguages;
exports.dynamicLanguages = dynamicLanguages;
exports.mh = mh;
exports.ka = ka;
exports.dl = dl;
exports.wb = wb;
exports.jh = jh;
exports.tn = tn;
exports.totalCount = totalCount;
exports.tableRows = tableRows;
exports.tableRowsHTML = tableRowsHTML;
exports.expectedTableHTML = expectedTableHTML;
exports.books = books;
exports.authors = authors$1;
exports.mergedBooks = mergedBooks;
exports.expectedBooks = expectedBooks;
exports.statewiseMetrics = statewiseMetrics;
exports.gj = gj;
exports.statewiseMetrics2 = statewiseMetrics2;
exports.reversed = reversed;
exports.myCustomMap = myCustomMap;
exports.myCustomFilter = myCustomFilter;
exports.describeList = describeList;
exports.userInputToKey = userInputToKey;
exports.printMessage = printMessage;
exports.bukowski = bukowski;
exports.repeatTwice = repeatTwice;
exports.messages = messages;
exports.repeatTwiceZeroKnowledge = repeatTwiceZeroKnowledge;
exports.some = some;
/* arrayLength Not a pure module */
