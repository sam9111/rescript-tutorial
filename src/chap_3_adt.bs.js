// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var SimpleTest = require("./simpleTest.bs.js");

function bookFormatToString(format) {
  switch (format) {
    case /* Hardcover */0 :
        return "Hardcover";
    case /* Paperback */1 :
        return "Paperback";
    case /* KindleEdition */2 :
        return "Kindle Edition";
    case /* Audible */3 :
        return "Audible";
    
  }
}

function isElectronic(format) {
  return format >= 2;
}

SimpleTest.assertEqual("Audible", "Audible", "[exercise 2] convert Audible constructor to string value");

SimpleTest.assertEqual(true, true, "[exercise 2] Audible is an electronic format");

function madeBy(codeEditor) {
  switch (codeEditor) {
    case /* VSCode */0 :
        return "Microsoft";
    case /* RubyMine */1 :
        return "JetBrains";
    case /* XCode */2 :
        return "Apple";
    
  }
}

SimpleTest.assertEqual("Microsoft", "Microsoft", "[exercise 3(b)] VSCode is made by ___");

SimpleTest.assertEqual("JetBrains", "JetBrains", "[exercise 3(b)] RubyMine is made by ___");

SimpleTest.assertEqual("Apple", "Apple", "[exercise 3(b)] XCode is made by ___");

function nextMoveAfter(player) {
  switch (player) {
    case /* PlayerA */0 :
        return /* PlayerB */1;
    case /* PlayerB */1 :
        return /* PlayerC */2;
    case /* PlayerC */2 :
        return /* PlayerA */0;
    
  }
}

function playerToString(player) {
  switch (player) {
    case /* PlayerA */0 :
        return "Player A";
    case /* PlayerB */1 :
        return "Player B";
    case /* PlayerC */2 :
        return "Player C";
    
  }
}

SimpleTest.assertEqual("Player B", "Player B", "[exercise 4] A -> B");

SimpleTest.assertEqual("Player C", "Player C", "[exercise 4] B -> C");

SimpleTest.assertEqual("Player A", "Player A", "[exercise 4] C -> A");

function userDescription(user) {
  if (typeof user === "number") {
    return "Anonymous";
  }
  switch (user.TAG | 0) {
    case /* Guest */0 :
        return "Guest#" + String(user._0);
    case /* LoggedInUser */1 :
        return user._1 + ", " + String(user._0) + " points";
    case /* Moderator */2 :
        return "(mod) " + user._1 + ", " + String(user._0) + " points";
    
  }
}

userDescription({
      TAG: /* Guest */0,
      _0: 42
    });

userDescription({
      TAG: /* LoggedInUser */1,
      _0: 2010,
      _1: "Robin Milner"
    });

userDescription({
      TAG: /* Moderator */2,
      _0: 1992,
      _1: "Grace Hopper"
    });

function formInputToHTML(formInput) {
  if (typeof formInput === "number") {
    return "<input type=\"submit\" />";
  }
  switch (formInput.TAG | 0) {
    case /* Text */0 :
        return "<input type=\"text\" name=\"" + formInput._0 + "\" />";
    case /* Number */1 :
        return "<input type=\"number\" name=\"" + formInput._0 + "\" min=" + String(formInput._1) + " max=" + String(formInput._2) + "/>";
    case /* Email */2 :
        return "<input type=\"email\" name=\"" + formInput._0 + "\" />";
    
  }
}

SimpleTest.assertEqual("<input type=\"text\" name=\"first_name\" />", formInputToHTML({
          TAG: /* Text */0,
          _0: "first_name"
        }), "[exercise 5] text input for entering first name");

SimpleTest.assertEqual("<input type=\"number\" name=\"tickets\" min=0 max=5/>", formInputToHTML({
          TAG: /* Number */1,
          _0: "tickets",
          _1: 0,
          _2: 5
        }), "[exercise 5] input for buying upto 5 tickets");

SimpleTest.assertEqual("<input type=\"email\" name=\"work_email\" />", formInputToHTML({
          TAG: /* Email */2,
          _0: "work_email"
        }), "[exercise 5] email input for entering work email");

SimpleTest.assertEqual("<input type=\"submit\" />", "<input type=\"submit\" />", "[exercise 5] a submit button");

var name = "age-limit";

var ageLimit = [
  name,
  18,
  25
];

var label = "price-range";

var budget2 = [
  label,
  400,
  2500
];

function toNumberFormHTML(input) {
  return "<input type=\"number\" name=\"" + input[0] + "\" min=\"" + String(input[1]) + "\" max=\"" + String(input[2]) + "\"";
}

function toNumberFormHTML2(param) {
  return "<input type=\"number\" name=\"" + param[0] + "\" min=\"" + String(param[1]) + "\" max=\"" + String(param[2]) + "\"";
}

var atom = {
  name: "Atom",
  url: "https://atom.io",
  repositories: 255,
  people: 56
};

var node = {
  name: "Node.js",
  url: "https://nodejs.org",
  repositories: 182,
  people: 375
};

var rails = {
  name: "Ruby on Rails",
  url: "https://rubyonrails.org",
  repositories: 99,
  people: 66
};

function projectLinkHTML(param) {
  return "<a href=\"" + param.url + "\">" + param.name + "</a>";
}

projectLinkHTML(atom);

projectLinkHTML(node);

projectLinkHTML(rails);

function projectLinkHTML2(project) {
  return "<a href=\"" + project.url + "\">" + project.name + "</a>";
}

var atom2 = {
  name: "Atom",
  url: "https://atom.io",
  repositories: 255,
  people: 57
};

var atom3 = {
  name: "Atom",
  url: "https://atom.io",
  repositories: 257,
  people: 62
};

var codersAtWork = {
  title: "Coders at Work",
  tagline: "Reflections on the Craft of Programming",
  format: /* Paperback */1,
  availableInStock: 10
};

function bookToHTML(book) {
  return "<div>\n    <h2>" + book.title + ": " + book.tagline + "</h2>\n    <p>" + String(book.availableInStock) + " new " + bookFormatToString(book.format) + " avialable in stock</p></div>";
}

var expectedBookHTML = "<div>\n    <h2>Coders at Work: Reflections on the Craft of Programming</h2>\n    <p>10 new Paperback avialable in stock</p></div>";

SimpleTest.assertEqual(expectedBookHTML, bookToHTML(codersAtWork), "[exercise 6] book => string (html formatted)");

var block = {
  TAG: /* Rectangle */0,
  _0: {
    x: 100,
    y: 100,
    width: 50,
    height: 50
  }
};

var line = {
  TAG: /* Line */1,
  _0: {
    x1: 150,
    y1: 125,
    x2: 250,
    y2: 125
  }
};

var textLabel = {
  TAG: /* Text */2,
  _0: {
    text: "Connect",
    fontSize: /* Medium */1,
    fontFamily: /* Monospace */2
  }
};

function drawRectangle(rect) {
  console.log("Drawing a rectangle:");
  console.log("\tCoordinates: (" + String(rect.x) + ", " + String(rect.y) + ")");
  console.log("\tDimensions: " + String(rect.width) + " x " + String(rect.height));
  
}

function drawLine(line) {
  console.log("Drawing a line:");
  console.log("\tFrom: (" + String(line.x1) + ", " + String(line.y1) + ")");
  console.log("\tTo: (" + String(line.x2) + ", " + String(line.y2) + ")");
  
}

function drawText(text) {
  console.log("Drawing text:");
  console.log("\tText: " + text.text);
  
}

function drawShape(shape) {
  switch (shape.TAG | 0) {
    case /* Rectangle */0 :
        return drawRectangle(shape._0);
    case /* Line */1 :
        return drawLine(shape._0);
    case /* Text */2 :
        return drawText(shape._0);
    
  }
}

console.log(drawShape(block));

console.log(drawShape(line));

console.log(drawShape(textLabel));

var paperback = /* Paperback */1;

var kindleEdition = /* KindleEdition */2;

var bookFormat = /* Hardcover */0;

var numberFormInput = [
  "age-limit",
  18,
  25
];

var min = 18;

var max = 25;

var budget = [
  "price-range",
  500,
  1500
];

var low = 500;

var high = 1500;

exports.paperback = paperback;
exports.kindleEdition = kindleEdition;
exports.bookFormat = bookFormat;
exports.bookFormatToString = bookFormatToString;
exports.isElectronic = isElectronic;
exports.madeBy = madeBy;
exports.nextMoveAfter = nextMoveAfter;
exports.playerToString = playerToString;
exports.userDescription = userDescription;
exports.formInputToHTML = formInputToHTML;
exports.numberFormInput = numberFormInput;
exports.name = name;
exports.min = min;
exports.max = max;
exports.ageLimit = ageLimit;
exports.budget = budget;
exports.label = label;
exports.low = low;
exports.high = high;
exports.budget2 = budget2;
exports.toNumberFormHTML = toNumberFormHTML;
exports.toNumberFormHTML2 = toNumberFormHTML2;
exports.atom = atom;
exports.node = node;
exports.rails = rails;
exports.projectLinkHTML = projectLinkHTML;
exports.projectLinkHTML2 = projectLinkHTML2;
exports.atom2 = atom2;
exports.atom3 = atom3;
exports.codersAtWork = codersAtWork;
exports.bookToHTML = bookToHTML;
exports.expectedBookHTML = expectedBookHTML;
exports.block = block;
exports.line = line;
exports.textLabel = textLabel;
exports.drawRectangle = drawRectangle;
exports.drawLine = drawLine;
exports.drawText = drawText;
exports.drawShape = drawShape;
/*  Not a pure module */
